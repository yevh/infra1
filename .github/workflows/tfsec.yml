name: tfsec
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  tfsec:
    name: tfsec
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Install tfsec
        shell: bash
        run: |
          # Install tfsec
          mkdir -p $HOME/.local/bin
          curl -sSfL https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | sh -s -- -b $HOME/.local/bin

      - name: Add tfsec to PATH
        shell: bash
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run tfsec
        id: tfsec
        continue-on-error: true
        shell: bash
        run: |
          # Run tfsec and save output to a file
          tfsec . > tfsec_output.txt
          # Optionally, you can use --concise-output for shorter messages
          # tfsec . --concise-output > tfsec_output.txt
          # Display the output in the logs
          cat tfsec_output.txt

      - name: Generate summary
        if: always()
        shell: bash
        run: |
          echo "# 🔒 tfsec Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Read the tfsec output
          TFSEC_OUTPUT=$(cat tfsec_output.txt)
          
          # Extract the numbers from tfsec output
          STATS=$(echo "$TFSEC_OUTPUT" | grep -A 7 "^results$")
          PASSED=$(echo "$STATS" | grep "passed" | awk '{print $2}')
          CRITICAL=$(echo "$STATS" | grep "critical" | awk '{print $2}')
          HIGH=$(echo "$STATS" | grep "high" | awk '{print $2}')
          MEDIUM=$(echo "$STATS" | grep "medium" | awk '{print $2}')
          LOW=$(echo "$STATS" | grep "low" | awk '{print $2}')
          
          # Write summary
          echo "## Summary" >> $GITHUB_STEP_SUMMARY
          echo "✅ Passed: $PASSED" >> $GITHUB_STEP_SUMMARY
          echo "🚨 Critical: $CRITICAL" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ High: $HIGH" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ Medium: $MEDIUM" >> $GITHUB_STEP_SUMMARY
          echo "ℹ️ Low: $LOW" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Extract and format findings (limit to critical and high severity for brevity)
          echo "## Findings" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "$TFSEC_OUTPUT" | awk '/Problem/,/timings/' | grep -E "(CRITICAL|HIGH)" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          # Set exit flag for critical issues
          if [ "$CRITICAL" -gt 0 ]; then
            echo "has_critical=true" >> $GITHUB_ENV
          fi

      - name: Check for critical issues
        if: env.has_critical == 'true'
        run: |
          echo "🚨 Critical security issues found!"
          exit 1
