name: tfsec
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  tfsec:
    name: tfsec
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Install tfsec
        shell: bash {0}
        run: |
          # Install tfsec
          mkdir -p $HOME/.local/bin
          curl -sSfL https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash -s -- -b $HOME/.local/bin

      - name: Add tfsec to PATH
        shell: bash {0}
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run tfsec
        id: tfsec
        continue-on-error: true
        shell: bash {0}
        run: |
          # Run tfsec and save output to a file in JSON format
          tfsec . --format json > tfsec_output.json
          # Display the output in the logs
          cat tfsec_output.json

      - name: Check for Critical and High issues
        if: always()
        id: check
        shell: bash {0}
        run: |
          # Check for Critical and High severity issues
          if [ -f tfsec_output.json ]; then
            CRITICAL_HIGH_COUNT=$(jq '[.results[] | select(.severity=="CRITICAL" or .severity=="HIGH")] | length' tfsec_output.json)
            if [ "$CRITICAL_HIGH_COUNT" -gt 0 ]; then
              echo "ðŸš¨ Critical or High severity issues found!"

              # Output the findings descriptions
              echo "## Findings"
              jq -r '.results[] | select(.severity=="CRITICAL" or .severity=="HIGH") | "\nSeverity: \(.severity)\nDescription: \(.description)\nFile: \(.location.filename):\(.location.start_line)\n"' tfsec_output.json

              # Set an output variable to indicate that Critical or High issues were found
              echo "issues_found=true" >> $GITHUB_OUTPUT
            else
              echo "No Critical or High severity issues found."
              echo "issues_found=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "tfsec output not found."
            echo "issues_found=false" >> $GITHUB_OUTPUT
          fi

      # Fail the job if Critical or High issues were found
      - name: Fail job if Critical or High issues found
        if: steps.check.outputs.issues_found == 'true'
        run: exit 1
