name: tfsec
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  tfsec:
    name: tfsec
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Install tfsec
        shell: bash {0}
        run: |
          # Install tfsec
          mkdir -p $HOME/.local/bin
          curl -sSfL https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash -s -- -b $HOME/.local/bin

      - name: Add tfsec to PATH
        shell: bash {0}
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run tfsec
        id: tfsec
        continue-on-error: true
        shell: bash {0}
        run: |
          # Run tfsec and save output to a file in JSON format
          tfsec . --format json > tfsec_output.json
          # Display the output in the logs
          cat tfsec_output.json

      - name: Generate summary
        if: always()
        shell: bash {0}
        run: |
          echo "# 🔒 tfsec Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if tfsec_output.json exists
          if [ -f tfsec_output.json ]; then
            # Parse JSON output
            PASSED=$(jq '.summary.passed' tfsec_output.json)
            CRITICAL=$(jq '.summary.critical' tfsec_output.json)
            HIGH=$(jq '.summary.high' tfsec_output.json)
            MEDIUM=$(jq '.summary.medium' tfsec_output.json)
            LOW=$(jq '.summary.low' tfsec_output.json)

            # Write summary
            echo "## Summary" >> $GITHUB_STEP_SUMMARY
            echo "✅ Passed: $PASSED" >> $GITHUB_STEP_SUMMARY
            echo "🚨 Critical: $CRITICAL" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ High: $HIGH" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ Medium: $MEDIUM" >> $GITHUB_STEP_SUMMARY
            echo "ℹ️ Low: $LOW" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Extract and format findings (limit to critical and high severity for brevity)
            echo "## Findings" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            jq -r '.results[] | select(.severity == "CRITICAL" or .severity == "HIGH") | "\(.severity): \(.description) \nFile: \(.location.filename):\(.location.start_line)\n"' tfsec_output.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

            # Set exit flag for critical issues
            if [ "$CRITICAL" -gt 0 ]; then
              echo "has_critical=true" >> $GITHUB_ENV
            fi
          else
            echo "No tfsec output found."
          fi

      - name: Check for critical issues
        if: env.has_critical == 'true'
        run: |
          echo "🚨 Critical security issues found!"
          exit 1
