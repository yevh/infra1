name: tfsec
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  tfsec:
    name: tfsec
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Install tfsec
        shell: bash
        run: |
          mkdir -p $HOME/.local/bin
          curl -sSfL https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash -s -- -b $HOME/.local/bin

      - name: Add tfsec to PATH
        shell: bash
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run tfsec
        id: tfsec
        continue-on-error: true
        shell: bash
        run: |
          tfsec . --format json > tfsec_output.json
          cat tfsec_output.json

      - name: Check for Issues and Output Detailed Findings
        if: always()
        id: check
        shell: bash
        run: |
          if [ -f tfsec_output.json ]; then
            CRITICAL_COUNT=$(jq '[.results[] | select(.severity=="CRITICAL")] | length' tfsec_output.json)
            HIGH_COUNT=$(jq '[.results[] | select(.severity=="HIGH")] | length' tfsec_output.json)
            MEDIUM_COUNT=$(jq '[.results[] | select(.severity=="MEDIUM")] | length' tfsec_output.json)
            LOW_COUNT=$(jq '[.results[] | select(.severity=="LOW")] | length' tfsec_output.json)
            TOTAL_ISSUES=$((CRITICAL_COUNT + HIGH_COUNT + MEDIUM_COUNT + LOW_COUNT))
            if [ "$TOTAL_ISSUES" -gt 0 ]; then
              echo "ðŸš¨ Issues found!"
              echo "Total issues: $TOTAL_ISSUES (Critical: $CRITICAL_COUNT, High: $HIGH_COUNT, Medium: $MEDIUM_COUNT, Low: $LOW_COUNT)"
              
              echo "## Detailed Findings"
              jq -r '.results[] | "Severity: \(.severity)
              Rule ID: \(.rule_id)
              Long ID: \(.long_id)
              Rule Description: \(.rule_description)
              Impact: \(.impact)
              Resolution: \(.resolution)
              Links: \(.links | join(", "))
              Description: \(.description)
              File: \(.location.filename):\(.location.start_line)-\(.location.end_line)
              "' tfsec_output.json
            else
              echo "No issues found."
            fi
            if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
              echo "Critical or High severity issues detected."
              echo "issues_found=true" >> $GITHUB_OUTPUT
            else
              echo "No Critical or High severity issues detected."
              echo "issues_found=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "tfsec output not found."
            echo "issues_found=false" >> $GITHUB_OUTPUT
          fi

      - name: Fail job if Critical or High issues found
        if: steps.check.outputs.issues_found == 'true'
        run: exit 1
