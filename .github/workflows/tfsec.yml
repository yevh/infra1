name: tfsec
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  tfsec:
    name: tfsec
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      issues: write
    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Run tfsec
        id: tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        continue-on-error: true

      - name: Process tfsec results
        id: process-results
        shell: bash
        run: |
          # Extract the counts from tfsec output
          RESULTS="${{ steps.tfsec.outputs.stdout }}"
          echo "Full output: $RESULTS"
          
          # Save full output for debugging
          echo "$RESULTS" > tfsec-full-output.txt
          
          # Get the summary counts
          COUNTS=$(echo "$RESULTS" | grep -A 5 "results$" || true)
          echo "Counts section: $COUNTS"
          
          # Extract individual counts
          CRITICAL=$(echo "$COUNTS" | grep "critical" | awk '{print $2}' || echo "0")
          HIGH=$(echo "$COUNTS" | grep "high" | awk '{print $2}' || echo "0")
          MEDIUM=$(echo "$COUNTS" | grep "medium" | awk '{print $2}' || echo "0")
          LOW=$(echo "$COUNTS" | grep "low" | awk '{print $2}' || echo "0")
          
          # Debug output
          echo "Extracted counts:"
          echo "CRITICAL: $CRITICAL"
          echo "HIGH: $HIGH"
          echo "MEDIUM: $MEDIUM"
          echo "LOW: $LOW"
          
          # Set outputs
          {
            echo "critical=$CRITICAL"
            echo "high=$HIGH"
            echo "medium=$MEDIUM"
            echo "low=$LOW"
          } >> "$GITHUB_OUTPUT"
          
          # Get details of failures
          FINDINGS=$(echo "$RESULTS" | grep -B1 -A5 "Result.*Security" || echo "No findings")
          echo "findings<<EOF" >> "$GITHUB_OUTPUT"
          echo "$FINDINGS" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        env:
          CRITICAL: ${{ steps.process-results.outputs.critical }}
          HIGH: ${{ steps.process-results.outputs.high }}
          MEDIUM: ${{ steps.process-results.outputs.medium }}
          LOW: ${{ steps.process-results.outputs.low }}
          FINDINGS: ${{ steps.process-results.outputs.findings }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const results = {
              critical: parseInt(process.env.CRITICAL) || 0,
              high: parseInt(process.env.HIGH) || 0,
              medium: parseInt(process.env.MEDIUM) || 0,
              low: parseInt(process.env.LOW) || 0
            };
            
            const total = results.critical + results.high + results.medium + results.low;
            
            let severity_icon = '';
            if (results.critical > 0) severity_icon = '🚨 Critical security issues detected!';
            else if (results.high > 0) severity_icon = '⚠️ High severity issues detected!';
            else if (results.medium > 0) severity_icon = '⚠️ Medium severity issues detected!';
            else if (results.low > 0) severity_icon = '⚠️ Low severity issues detected!';
            else severity_icon = '✅ No security issues found!';
            
            const summary = `## tfsec Security Scan Results 🔒

            ${severity_icon}

            Found **${total}** potential security issues:
            - 🔴 Critical Severity: ${results.critical}
            - 🟣 High Severity: ${results.high}
            - 🟡 Medium Severity: ${results.medium}
            - 🟢 Low Severity: ${results.low}

            ### Sample Findings
            \`\`\`
            ${process.env.FINDINGS || 'No findings details available'}
            \`\`\`
            
            [View full scan results](${context.payload.pull_request.html_url}/checks)`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Check for failures
        if: steps.tfsec.outputs.exit_code != '0'
        run: exit 1
