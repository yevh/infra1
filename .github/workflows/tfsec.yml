name: tfsec
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  tfsec:
    name: tfsec
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      issues: write
    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Run tfsec
        id: tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          soft_fail: true
          format: text
        continue-on-error: true

      - name: Process tfsec results
        id: process-results
        run: |
          # Get the tfsec output from previous step
          OUTPUT="${{ steps.tfsec.outputs.output }}"
          
          # Count findings by severity using grep
          CRITICAL=$(echo "$OUTPUT" | grep -c "Result.*CRITICAL" || echo "0")
          HIGH=$(echo "$OUTPUT" | grep -c "Result.*HIGH" || echo "0")
          MEDIUM=$(echo "$OUTPUT" | grep -c "Result.*MEDIUM" || echo "0")
          LOW=$(echo "$OUTPUT" | grep -c "Result.*LOW" || echo "0")
          
          # Extract findings details
          DETAILS=$(echo "$OUTPUT" | grep -A 2 "Result.*Security" | head -n 15)
          
          # Save results
          {
            echo "critical=$CRITICAL"
            echo "high=$HIGH"
            echo "medium=$MEDIUM"
            echo "low=$LOW"
            echo "details<<EOF"
            echo "$DETAILS"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        env:
          CRITICAL: ${{ steps.process-results.outputs.critical }}
          HIGH: ${{ steps.process-results.outputs.high }}
          MEDIUM: ${{ steps.process-results.outputs.medium }}
          LOW: ${{ steps.process-results.outputs.low }}
          DETAILS: ${{ steps.process-results.outputs.details }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const results = {
              critical: parseInt(process.env.CRITICAL) || 0,
              high: parseInt(process.env.HIGH) || 0,
              medium: parseInt(process.env.MEDIUM) || 0,
              low: parseInt(process.env.LOW) || 0
            };
            
            const total = results.critical + results.high + results.medium + results.low;
            
            let severity_icon = '';
            if (results.critical > 0) severity_icon = 'üö® Critical security issues detected!';
            else if (results.high > 0) severity_icon = '‚ö†Ô∏è High severity issues detected!';
            else if (results.medium > 0) severity_icon = '‚ö†Ô∏è Medium severity issues detected!';
            else if (results.low > 0) severity_icon = '‚ö†Ô∏è Low severity issues detected!';
            else severity_icon = '‚úÖ No security issues found!';
            
            const summary = `## tfsec Security Scan Results üîí

            ${severity_icon}

            Found **${total}** potential security issues:
            - üî¥ Critical Severity: ${results.critical}
            - üü£ High Severity: ${results.high}
            - üü° Medium Severity: ${results.medium}
            - üü¢ Low Severity: ${results.low}

            ### Sample Findings
            \`\`\`
            ${process.env.DETAILS}
            \`\`\`
            
            [View full scan results](${context.payload.pull_request.html_url}/checks)`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
