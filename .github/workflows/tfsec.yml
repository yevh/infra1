name: tfsec
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  tfsec:
    name: tfsec
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      issues: write
    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Run tfsec
        id: tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        continue-on-error: true

      - name: Process tfsec results
        id: process-results
        shell: bash
        run: |
          # Save tfsec output to a file
          echo "${{ steps.tfsec.outputs.stdout }}" > tfsec-output.txt
          
          # Process the results section
          RESULTS=$(cat tfsec-output.txt)
          
          # Extract counts using sed to find the specific lines and awk to get the numbers
          CRITICAL=$(echo "$RESULTS" | grep -A6 "results$" | grep "critical" | awk '{print $2}')
          HIGH=$(echo "$RESULTS" | grep -A6 "results$" | grep "high" | awk '{print $2}')
          MEDIUM=$(echo "$RESULTS" | grep -A6 "results$" | grep "medium" | awk '{print $2}')
          LOW=$(echo "$RESULTS" | grep -A6 "results$" | grep "low" | awk '{print $2}')
          
          # Get findings
          FINDINGS=$(echo "$RESULTS" | grep -B2 -A10 "Result.*Security" | head -n 15)
          
          # Export the values
          echo "CRITICAL=${CRITICAL:-0}" >> $GITHUB_ENV
          echo "HIGH=${HIGH:-0}" >> $GITHUB_ENV
          echo "MEDIUM=${MEDIUM:-0}" >> $GITHUB_ENV
          echo "LOW=${LOW:-0}" >> $GITHUB_ENV
          
          # Export findings using EOF delimiter
          echo 'FINDINGS<<EOF' >> $GITHUB_ENV
          echo "$FINDINGS" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const results = {
              critical: parseInt(process.env.CRITICAL) || 0,
              high: parseInt(process.env.HIGH) || 0,
              medium: parseInt(process.env.MEDIUM) || 0,
              low: parseInt(process.env.LOW) || 0
            };
            
            const total = results.critical + results.high + results.medium + results.low;
            
            let severity_icon = '';
            if (results.critical > 0) severity_icon = '🚨 Critical security issues detected!';
            else if (results.high > 0) severity_icon = '⚠️ High severity issues detected!';
            else if (results.medium > 0) severity_icon = '⚠️ Medium severity issues detected!';
            else if (results.low > 0) severity_icon = '⚠️ Low severity issues detected!';
            else severity_icon = '✅ No security issues found!';
            
            const summary = `## tfsec Security Scan Results 🔒

            ${severity_icon}

            Found **${total}** potential security issues:
            - 🔴 Critical Severity: ${results.critical}
            - 🟣 High Severity: ${results.high}
            - 🟡 Medium Severity: ${results.medium}
            - 🟢 Low Severity: ${results.low}

            ### Sample Findings
            \`\`\`
            ${process.env.FINDINGS || 'No findings details available'}
            \`\`\`
            
            [View full scan results](${context.payload.pull_request.html_url}/checks)`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Check for failures
        if: steps.tfsec.outputs.exit_code != '0'
        run: exit 1
