name: tfsec
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  tfsec:
    name: tfsec
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      issues: write
    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Run tfsec
        id: tfsec
        uses: aquasecurity/tfsec-action@v1.0.7
        with:
          format: sarif
          soft_fail: true
        continue-on-error: true

      - name: Process tfsec results
        id: process-results
        if: success() || failure()
        shell: bash
        run: |
          echo "### Security Scan Results" >> $GITHUB_STEP_SUMMARY
          
          # Get results counts using tfsec CLI output
          CRITICAL=$(grep -c "\\[CRITICAL\\]" <<< "${{ steps.tfsec.outputs.stdout }}" || echo "0")
          HIGH=$(grep -c "\\[HIGH\\]" <<< "${{ steps.tfsec.outputs.stdout }}" || echo "0")
          MEDIUM=$(grep -c "\\[MEDIUM\\]" <<< "${{ steps.tfsec.outputs.stdout }}" || echo "0")
          LOW=$(grep -c "\\[LOW\\]" <<< "${{ steps.tfsec.outputs.stdout }}" || echo "0")
          
          # Create a summary section
          echo "Found issues:" >> $GITHUB_STEP_SUMMARY
          echo "- Critical: $CRITICAL" >> $GITHUB_STEP_SUMMARY
          echo "- High: $HIGH" >> $GITHUB_STEP_SUMMARY
          echo "- Medium: $MEDIUM" >> $GITHUB_STEP_SUMMARY
          echo "- Low: $LOW" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Extract and display findings
          echo "### Findings" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          grep -E "\\[(CRITICAL|HIGH|MEDIUM|LOW)\\].*" <<< "${{ steps.tfsec.outputs.stdout }}" >> $GITHUB_STEP_SUMMARY || echo "No findings"
          echo '```' >> $GITHUB_STEP_SUMMARY
          
          # Set outputs for PR comment
          echo "critical=$CRITICAL" >> "$GITHUB_OUTPUT"
          echo "high=$HIGH" >> "$GITHUB_OUTPUT"
          echo "medium=$MEDIUM" >> "$GITHUB_OUTPUT"
          echo "low=$LOW" >> "$GITHUB_OUTPUT"
          
          # Get findings for PR comment
          FINDINGS=$(grep -E "\\[(CRITICAL|HIGH|MEDIUM|LOW)\\].*" <<< "${{ steps.tfsec.outputs.stdout }}" || echo "No findings")
          echo "findings<<EOF" >> "$GITHUB_OUTPUT"
          echo "$FINDINGS" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        env:
          CRITICAL: ${{ steps.process-results.outputs.critical }}
          HIGH: ${{ steps.process-results.outputs.high }}
          MEDIUM: ${{ steps.process-results.outputs.medium }}
          LOW: ${{ steps.process-results.outputs.low }}
          FINDINGS: ${{ steps.process-results.outputs.findings }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const total = parseInt(process.env.CRITICAL) + parseInt(process.env.HIGH) + 
                         parseInt(process.env.MEDIUM) + parseInt(process.env.LOW);
            
            let icon = '‚úÖ';
            if (process.env.CRITICAL > 0) icon = 'üö®';
            else if (process.env.HIGH > 0) icon = '‚ö†Ô∏è';
            else if (process.env.MEDIUM > 0 || process.env.LOW > 0) icon = '‚ö†Ô∏è';
            
            const comment = `## Security Scan ${icon}\n
Found **${total}** potential issues:
- Critical: ${process.env.CRITICAL}
- High: ${process.env.HIGH}
- Medium: ${process.env.MEDIUM}
- Low: ${process.env.LOW}

<details>
<summary>View Findings</summary>

\`\`\`
${process.env.FINDINGS}
\`\`\`
</details>`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Check for critical issues
        if: steps.process-results.outputs.critical > 0
        run: exit 1
