name: tfsec
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  tfsec:
    name: tfsec
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      issues: write
    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Run tfsec
        id: tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        continue-on-error: true

      - name: Process tfsec results
        id: process-results
        run: |
          # Get the tfsec stdout
          TFSEC_OUTPUT="${{ steps.tfsec.outputs.stdout }}"
          
          # Extract counts from the results section
          CRITICAL=$(echo "$TFSEC_OUTPUT" | grep "critical" | awk '{print $2}')
          HIGH=$(echo "$TFSEC_OUTPUT" | grep "high" | awk '{print $2}')
          MEDIUM=$(echo "$TFSEC_OUTPUT" | grep "medium" | awk '{print $2}')
          LOW=$(echo "$TFSEC_OUTPUT" | grep "low" | awk '{print $2}')
          
          # Save the full output for findings details
          echo "tfsec_output<<EOF" >> $GITHUB_OUTPUT
          echo "$TFSEC_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Save the counts
          echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
          echo "high=$HIGH" >> $GITHUB_OUTPUT
          echo "medium=$MEDIUM" >> $GITHUB_OUTPUT
          echo "low=$LOW" >> $GITHUB_OUTPUT

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        env:
          CRITICAL: ${{ steps.process-results.outputs.critical }}
          HIGH: ${{ steps.process-results.outputs.high }}
          MEDIUM: ${{ steps.process-results.outputs.medium }}
          LOW: ${{ steps.process-results.outputs.low }}
          TFSEC_OUTPUT: ${{ steps.process-results.outputs.tfsec_output }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const results = {
              critical: parseInt(process.env.CRITICAL) || 0,
              high: parseInt(process.env.HIGH) || 0,
              medium: parseInt(process.env.MEDIUM) || 0,
              low: parseInt(process.env.LOW) || 0
            };
            
            const total = results.critical + results.high + results.medium + results.low;
            
            let severity_icon = '';
            if (results.critical > 0) severity_icon = '🚨 Critical security issues detected!';
            else if (results.high > 0) severity_icon = '⚠️ High severity issues detected!';
            else if (results.medium > 0) severity_icon = '⚠️ Medium severity issues detected!';
            else if (results.low > 0) severity_icon = '⚠️ Low severity issues detected!';
            else severity_icon = '✅ No security issues found!';
            
            // Extract findings details
            const output = process.env.TFSEC_OUTPUT;
            const findings = output
              .split('Result')
              .filter(section => section.includes('Security'))
              .slice(0, 5)
              .join('\nResult');
            
            const summary = `## tfsec Security Scan Results 🔒

            ${severity_icon}

            Found **${total}** potential security issues:
            - 🔴 Critical Severity: ${results.critical}
            - 🟣 High Severity: ${results.high}
            - 🟡 Medium Severity: ${results.medium}
            - 🟢 Low Severity: ${results.low}

            ### Sample Findings
            \`\`\`
            ${findings}
            \`\`\`
            
            [View full scan results](${context.payload.pull_request.html_url}/checks)`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
