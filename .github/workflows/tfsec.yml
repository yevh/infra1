name: tfsec
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  tfsec:
    name: tfsec
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      issues: write
    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Run tfsec
        id: tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          # Ensure tfsec outputs results in JSON format
          format: json
        continue-on-error: true

      - name: Process tfsec results
        id: process-results
        shell: bash
        run: |
          # Install jq for JSON parsing
          sudo apt-get update && sudo apt-get install -y jq

          # Get the tfsec results JSON
          echo "${{ steps.tfsec.outputs.results }}" > tfsec-results.json

          # Extract counts by severity
          CRITICAL=$(jq '[.results[] | select(.severity=="CRITICAL")] | length' tfsec-results.json)
          HIGH=$(jq '[.results[] | select(.severity=="HIGH")] | length' tfsec-results.json)
          MEDIUM=$(jq '[.results[] | select(.severity=="MEDIUM")] | length' tfsec-results.json)
          LOW=$(jq '[.results[] | select(.severity=="LOW")] | length' tfsec-results.json)

          # Debug output
          echo "CRITICAL: $CRITICAL"
          echo "HIGH: $HIGH"
          echo "MEDIUM: $MEDIUM"
          echo "LOW: $LOW"

          # Set outputs
          echo "critical=$CRITICAL" >> "$GITHUB_OUTPUT"
          echo "high=$HIGH" >> "$GITHUB_OUTPUT"
          echo "medium=$MEDIUM" >> "$GITHUB_OUTPUT"
          echo "low=$LOW" >> "$GITHUB_OUTPUT"

          # Get sample findings
          FINDINGS=$(jq -r '.results[] | "\(.severity): \(.rule_id) - \(.description)"' tfsec-results.json | head -n 10)

          # Set findings output
          echo "findings<<EOF" >> "$GITHUB_OUTPUT"
          echo "$FINDINGS" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        env:
          CRITICAL: ${{ steps.process-results.outputs.critical }}
          HIGH: ${{ steps.process-results.outputs.high }}
          MEDIUM: ${{ steps.process-results.outputs.medium }}
          LOW: ${{ steps.process-results.outputs.low }}
          FINDINGS: ${{ steps.process-results.outputs.findings }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const results = {
              critical: parseInt(process.env.CRITICAL) || 0,
              high: parseInt(process.env.HIGH) || 0,
              medium: parseInt(process.env.MEDIUM) || 0,
              low: parseInt(process.env.LOW) || 0
            };

            const total = results.critical + results.high + results.medium + results.low;

            let severity_icon = '';
            if (results.critical > 0) severity_icon = 'üö® Critical security issues detected!';
            else if (results.high > 0) severity_icon = '‚ö†Ô∏è High severity issues detected!';
            else if (results.medium > 0) severity_icon = '‚ö†Ô∏è Medium severity issues detected!';
            else if (results.low > 0) severity_icon = '‚ö†Ô∏è Low severity issues detected!';
            else severity_icon = '‚úÖ No security issues found!';

            const summary = `## tfsec Security Scan Results üîí

            ${severity_icon}

            Found **${total}** potential security issues:
            - üö® Critical Severity: ${results.critical}
            - ‚ö†Ô∏è High Severity: ${results.high}
            - ‚ö†Ô∏è Medium Severity: ${results.medium}
            - ‚ö†Ô∏è Low Severity: ${results.low}

            ### Sample Findings
            \`\`\`
            ${process.env.FINDINGS || 'No findings details available'}
            \`\`\`

            [View full scan results](${context.payload.pull_request.html_url}/checks)`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Check for failures
        if: steps.tfsec.outputs.exit_code != '0'
        run: exit 1
