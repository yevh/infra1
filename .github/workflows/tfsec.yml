name: tfsec
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  tfsec:
    name: tfsec
    runs-on: ubuntu-latest
    env:
      IS_FORK: ${{ github.event.pull_request.head.repo.full_name != github.repository }}
    steps:
      - name: Clone repo
        uses: actions/checkout@v4

      - name: Install tfsec
        shell: bash {0}
        run: |
          mkdir -p $HOME/.local/bin
          curl -sSfL https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash -s -- -b $HOME/.local/bin

      - name: Add tfsec to PATH
        shell: bash {0}
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run tfsec
        id: tfsec
        continue-on-error: true
        shell: bash {0}
        run: |
          # Run tfsec and save output to a file in JSON format
          tfsec . --format json > tfsec_output.json
          # Display the output in the logs
          cat tfsec_output.json

      - name: Check for Issues and Output Detailed Findings
        if: always()
        id: check
        shell: bash {0}
        run: |
          # Prevent the script from exiting on errors
          set +e
          if [ -f tfsec_output.json ]; then
            # Calculate issue counts
            CRITICAL_COUNT=$(jq '[.results[] | select(.severity=="CRITICAL")] | length' tfsec_output.json)
            HIGH_COUNT=$(jq '[.results[] | select(.severity=="HIGH")] | length' tfsec_output.json)
            MEDIUM_COUNT=$(jq '[.results[] | select(.severity=="MEDIUM")] | length' tfsec_output.json)
            LOW_COUNT=$(jq '[.results[] | select(.severity=="LOW")] | length' tfsec_output.json)
            TOTAL_ISSUES=$((CRITICAL_COUNT + HIGH_COUNT + MEDIUM_COUNT + LOW_COUNT))
            if [ "$TOTAL_ISSUES" -gt 0 ]; then
              echo "🚨 Issues found!"
              echo "Total issues: $TOTAL_ISSUES (Critical: $CRITICAL_COUNT, High: $HIGH_COUNT, Medium: $MEDIUM_COUNT, Low: $LOW_COUNT)"

              # Save the summary to an environment variable for use in the next step
              echo "FINDINGS_SUMMARY=🚨 Issues found!%0A**Total issues:** $TOTAL_ISSUES (Critical: $CRITICAL_COUNT, High: $HIGH_COUNT, Medium: $MEDIUM_COUNT, Low: $LOW_COUNT)" >> $GITHUB_ENV

              echo "## Detailed Findings"
              # Output detailed findings with error handling
              jq -r '.results[] | "Severity: \(.severity // "N/A")\nRule ID: \(.rule_id // "N/A")\nLong ID: \(.long_id // "N/A")\nRule Description: \(.rule_description // "N/A")\nImpact: \(.impact // "N/A")\nResolution: \(.resolution // "N/A")\nLinks: \(.links | join(", ") // "N/A")\nDescription: \(.description // "N/A")\nFile: \(.location.filename // "N/A"):\(.location.start_line // "N/A")-\(.location.end_line // "N/A")\n"' tfsec_output.json
            else
              echo "No issues found."
              # Save a message indicating no issues were found
              echo "FINDINGS_SUMMARY=✅ No issues found." >> $GITHUB_ENV
            fi
            # Determine if the job should fail
            if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
              echo "Critical or High severity issues detected."
              echo "issues_found=true" >> $GITHUB_OUTPUT
            else
              echo "No Critical or High severity issues detected."
              echo "issues_found=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "tfsec output not found."
            echo "issues_found=false" >> $GITHUB_OUTPUT
            echo "FINDINGS_SUMMARY=⚠️ tfsec output not found." >> $GITHUB_ENV
          fi

          # Notify if the PR is from a fork
          if [ "$IS_FORK" = "true" ]; then
            echo "Note: Cannot post findings summary as a comment because the PR is from a fork."
          fi

      - name: Comment findings summary on PR
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ${{ env.FINDINGS_SUMMARY }}

      - name: Fail job if Critical or High issues found
        if: steps.check.outputs.issues_found == 'true'
        run: exit 1
