name: tfsec Security Scan

on:
  push:
    branches:
      - master
  pull_request:

permissions:
  issues: write
  pull-requests: write

jobs:
  tfsec:
    name: Run tfsec Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout Repository
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 #v4.2.1

      - name: Install tfsec
        shell: bash
        run: |
          TFSEC_VERSION="v1.0.3"
          TFSEC_SHA256="b466648d6e39e7c75324f25d83891162a721f2d6"
          
          mkdir -p $HOME/.local/bin
          curl -sSfL "https://github.com/aquasecurity/tfsec/releases/download/${TFSEC_VERSION}/tfsec-linux-amd64" -o $HOME/.local/bin/tfsec
          chmod +x $HOME/.local/bin/tfsec
          
          echo "${TFSEC_SHA256} $HOME/.local/bin/tfsec" | sha256sum -c -
          
      - name: Add tfsec to PATH
        shell: bash
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Run tfsec
        id: tfsec
        continue-on-error: true
        shell: bash
        run: |
          tfsec . --format json | jq 'del(.results[].location.source_code)' > tfsec_output.json

      - name: Check and Prepare Summary
        if: always()
        id: check
        shell: bash
        run: |
          set +e  # Continue script even if a command fails

          if [ -f tfsec_output.json ]; then
            # Extract counts using jq
            CRITICAL_COUNT=$(jq '[.results[] | select(.severity=="CRITICAL")] | length' tfsec_output.json)
            HIGH_COUNT=$(jq '[.results[] | select(.severity=="HIGH")] | length' tfsec_output.json)
            MEDIUM_COUNT=$(jq '[.results[] | select(.severity=="MEDIUM")] | length' tfsec_output.json)
            LOW_COUNT=$(jq '[.results[] | select(.severity=="LOW")] | length' tfsec_output.json)
            TOTAL_ISSUES=$((CRITICAL_COUNT + HIGH_COUNT + MEDIUM_COUNT + LOW_COUNT))

            if [ "$TOTAL_ISSUES" -gt 0 ]; then
              SUMMARY="üö® **Issues found!**
              **Total issues:** $TOTAL_ISSUES (üî¥ Critical: $CRITICAL_COUNT, üü£ High: $HIGH_COUNT, üü° Medium: $MEDIUM_COUNT, üü¢ Low: $LOW_COUNT)"

              echo "findings_summary<<EOF" >> $GITHUB_OUTPUT
              echo "$SUMMARY" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            else
              SUMMARY="‚úÖ **No security issues found!**"

              echo "findings_summary<<EOF" >> $GITHUB_OUTPUT
              echo "$SUMMARY" >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
            fi

            if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
              echo "issues_found=true" >> $GITHUB_OUTPUT
            else
              echo "issues_found=false" >> $GITHUB_OUTPUT
            fi
          else
            SUMMARY="‚ö†Ô∏è **tfsec output not found.**"

            echo "findings_summary<<EOF" >> $GITHUB_OUTPUT
            echo "$SUMMARY" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

            echo "issues_found=false" >> $GITHUB_OUTPUT
          fi

      - name: Comment Findings Summary on PR
        if: >
          github.event_name == 'pull_request' &&
          github.event.pull_request.head.repo.full_name == github.repository
        uses: peter-evans/create-or-update-comment@b466648d6e39e7c75324f25d83891162a721f2d6 #v1.0.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ${{ steps.check.outputs.findings_summary }}

      - name: Detailed Findings
        if: always()
        shell: bash
        run: |
          if [ -f tfsec_output.json ]; then
            echo "## Detailed Findings"
            jq -r '.results[] | "Severity: \(.severity)\nRule ID: \(.rule_id)\nDescription: \(.description)\nFile: \(.location.filename):\(.location.start_line)-\(.location.end_line)\n\n"' tfsec_output.json
          else
            echo "tfsec_output.json not found. No detailed findings to display."
          fi

      - name: Fail - Critical or High Issues Found
        if: steps.check.outputs.issues_found == 'true'
        run: exit 1
